{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","hanbleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","citasTemp","filter","useEffect","setItem","stringify","titulo","length","ci","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a0026335.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n\r\n\r\nconst Formulario = ({ crearCita }) => {\r\n\r\n    const [cita, setCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    })\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    const hanbleChange = e => {\r\n        setCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n    const onSubmitCita = e => {\r\n        e.preventDefault()\r\n\r\n        //validar\r\n        if (mascota.trim() === ''\r\n            || propietario.trim() === ''\r\n            || fecha.trim() === ''\r\n            || hora.trim() === ''\r\n            || sintomas.trim() === ''\r\n        ) {\r\n            setError(true)\r\n            return\r\n        }\r\n        if (error) setError(false)\r\n\r\n        //Asignar Id\r\n        cita.id = uuid()\r\n        //crear Obj\r\n        crearCita(cita)\r\n        // Limpiar From\r\n        setCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            {error ? <p className='alerta-error'>Todos los campos son Obligatorios</p> : null}\r\n            <form onSubmit={onSubmitCita}>\r\n                <label>Nombre de la mascota</label>\r\n                <input\r\n                    type='text'\r\n                    name='mascota'\r\n                    className='u-full-width'\r\n                    placeholder='Nombre Mascota'\r\n                    onChange={hanbleChange}\r\n                    value={mascota}\r\n                ></input>\r\n                <label>Nombre del dueño</label>\r\n                <input\r\n                    type='text'\r\n                    name='propietario'\r\n                    className='u-full-width'\r\n                    placeholder='Nombre del Dueño de la Mascota'\r\n                    onChange={hanbleChange}\r\n                    value={propietario}\r\n                ></input>\r\n                <label>Fecha</label>\r\n                <input\r\n                    type='date'\r\n                    name='fecha'\r\n                    className='u-full-width'\r\n                    onChange={hanbleChange}\r\n                    value={fecha}\r\n                ></input>\r\n                <label>Hora</label>\r\n                <input\r\n                    type='time'\r\n                    name='hora'\r\n                    className='u-full-width'\r\n                    onChange={hanbleChange}\r\n                    value={hora}\r\n                ></input>\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    name='sintomas'\r\n                    className='u-full-width'\r\n                    onChange={hanbleChange}\r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className='u-full-width button-primary'\r\n                >Agregar Citas</button>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita\r\n\r\n    \r\n\r\n    return(\r\n    <div className='cita'>\r\n        <p>Mascota: <span>{mascota}</span></p>\r\n        <p>Propietario: <span>{propietario}</span></p>\r\n        <p>Fecha: <span>{fecha}</span></p>\r\n        <p>Hora: <span>{hora}</span></p>\r\n        <p>Sintomas: <span>{sintomas}</span></p>\r\n \r\n        <button\r\n            className='button eliminar u-full-width'\r\n            onClick={() => eliminarCita(cita.id)}\r\n            >Eliminar &times;</button>            \r\n    </div>\r\n)}\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Cita;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  let citasIniciales = [];\n\n  if (JSON.parse(localStorage.getItem('citas'))) {\n    citasIniciales = JSON.parse(localStorage.getItem('citas'))\n  }\n\n  const [citas, setCita] = useState(citasIniciales)\n\n  const crearCita = ci => {\n    setCita([...citas, ci])\n  }\n\n  const eliminarCita = id => {\n    const citasTemp = citas.filter(cita => cita.id !== id)\n    setCita(citasTemp)\n  }\n\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', [])\n    }\n  }, [citas, citasIniciales])\n\n\n  const titulo = citas.length === 0 ? 'No Hay Citas' : 'Administa tus Citas'\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className='container'>\n        <div className='row'>\n          <div className='one-half column'>\n            <Formulario\n              crearCita={crearCita}\n            ></Formulario>\n          </div>\n          <div className='one-half column'>\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}